## [Back to the syllabus](/ECMJ-GSSI-2022/README)

# ECMJ: First models of climate change

Let's develop a first simple model of climate change. 

We first need to recall the fundamental concept of _differential equation_ and see how to solve them in Julia. 

## Differential equations

What is a **scientific model**? 
A _matematical description_ of (some aspects of) reality. 

What's the _language_ with which such a description can be formulated?
It's the language of [equations](https://en.wikipedia.org/wiki/Equation), namely equalities among formulas that impose _constraints_ on what can happen. 

What else can we say about how these equations usually look like?
Usually, when modeling reality, we are interested in knowing what happens after some **time**, given some _initial conditions_.
Our equations will likely be **functions of a time variable $t$**. 
Moreover, it is typically the case that, rather than being able to describe with an equation how the system look like at a certain time $t$, we only have hypotheses about **how the system changes** across time: 
for example, we can rarely predict, a-priori, where a moving mass will be located in space, but we can provide equations that approximate how the position of the mass will change from an instant to the next one.   

The equations describing how a function _changes_ are called [differential equations](https://en.wikipedia.org/wiki/Differential_equation). 

A simple example of _ordinary_ (one-variable) differential equation is $D_t y = a - bt$. In Julia we can define such differential equation using the [ModelingToolkit](https://mtk.sciml.ai/stable/) library: 
```julia
using ModelingToolkit

@variables t y(t)
@parameters a b
D = Differential(t)

equation = [ 
	D(y) ~ a - b*t
]

@named system = ODESystem(equation)
```
The `@named` macro [essentially rewrites](https://discourse.julialang.org/t/modelingtoolkit-jl-version-management/67771/3) the last line as 
```julia; eval=false
system = ODESystem(equation; name=:example_system)
```

We can then solve the system with a compatible [Julia library of numerical solvers](https://mtk.sciml.ai/stable/#Compatible-Numerical-Solvers): 
```julia
using DifferentialEquations

init_condition = [y => 0.0]
time_span = (0.0, 10.0)
parameters = [a => 2.0, b => .5]

problem = ODEProblem(system, init_condition, time_span, parameters)
solution = solve(problem)
```

Let's see the solution: 
```julia
using Plots
plot(solution, ylim=(-5,5), framestyle=:origin)
```

## The simplest climate model 

Let's consider arguably the [simplest nontrivial climate model](https://computationalthinking.mit.edu/Spring21/our_first_climate_model/): 
$$\begin{align*} 
& \text{\color{brown}{change in heat content}} \newline
&= \text{\color{yellow}{incoming solar radiation (energy from the Sun's rays)}} \newline 
& \phantom{=} - \text{\color{blue}{outgoing thermal radiation (i.e. blackbody cooling to space)}} \newline 
& \phantom{=} + \text{\color{grey}{human-caused greenhouse effect (trapped outgoing radiation)}}. 
\end{align*}$$

Each of the above terms should be intended as an average over the entire globe.

### Incoming radiation

Let's address the first term, $\text{\color{yellow}{incoming solar radiation}}$. 

![](/images/planetary_energy_balance.png)

The amount of energy that Earth receives from the Sun, i.e. Earth's [insolation](https://en.wikipedia.org/wiki/Solar_irradiance), is 
```julia
S = 1368 # measured in W/m^2  
```
Part of it is _reflected_ back to space. The measure of such effect is called [albedo](https://en.wikipedia.org/wiki/Albedo), and in Earth's case can be estimated to be
```julia
Î± = .3
```
Thus, out of the energy `S` that is received by the Sun, the fraction that it is retained is `1-Î±`. 

There's another important correction that we should apply to the above measure of insolation. 

![](/images/insolation.jpg)

The above number `S` is estimated for a square meter of surface that lies _perpendicularly_ to the sunrays. 
However, the Earth's surface is spherical. 
What's the correction which would apply? 
A disc of radius $R$ has area $\pi R^2$
while a sphere of the same radius has area $4 \pi R^4$, so **there's a factor $\frac 14$** that should multiplay `S`.

We then have that the incoming solar radiation on the r.h.s. of our starting equation is 
```julia
in_radiation = S*(1-Î±)/4;
```

### Earth without outgoing radiation

Let's start by considering **only** the $\text{\color{yellow}{incoming solar radiation}}$ and ignoring the other terms: 
$$\begin{align*} 
& \text{\color{brown}{change in heat content}} = \text{\color{yellow}{incoming solar radiation}}
\end{align*}$$

We want to model the Earth's [temperature](https://en.wikipedia.org/wiki/Temperature) in this simple case: 
```julia 
@variables temp(t)
```

The equation above is about the [heat content](https://en.wikipedia.org/wiki/Heat) of the planet. 
ðŸ¤” However, when we enter a swimming pool we don't care about the amount of heat stored in it, we care about the water's temperature, don't we? <!-- joke -->
Recall that the temperature is given by the heat content divided by the [heat capacity](https://en.wikipedia.org/wiki/Heat#Heat_capacity) $C$, in other words
$$
\text{\color{brown}{change in heat content}} = (\text{\color{red}{change in temperature}}) \cdot C.
$$
Therefore
$$\begin{align*} 
& \text{\color{red}{change in temperature}} 
= \frac 1C (\text{\color{yellow}{incoming solar radiation}} ). 
\end{align*}$$

Hence, in order to estimate how much the _incoming radiation_ will influence the **temperature** of the Earth, 
we need to have an estimate the [heat capacity of the atmosphere and upper-ocean](https://en.wikipedia.org/wiki/Earth%27s_energy_budget): 
```julia
@parameters C = 51. # J/m^2/Â°C 
```

We thus have the system
```julia
@named sys_only_in = ODESystem([ D(temp) ~ in_radiation / C ])
```

In order to define an `ODEProblem`, we also need an initial condition. 
Let's assume that the time 0 of our equation corresponds to the year 1850, before the start of the [Second Industrial Revolution](https://en.wikipedia.org/wiki/Second_Industrial_Revolution); at the time, it is estimated that 
```julia
tempâ‚€ = 14.0 # Â°C in 1850
init_condition = [temp => tempâ‚€]
```

We can now solve system: 
```julia
prob_only_in = ODEProblem(sys_only_in, init_condition, (0, 170))
sol_only_in = solve(prob_only_in)
```

How does the solution look like? Let's plot it:
```julia
plot(sol_only_in,
	legend = false, 
	xlabel = "Years since 1850",
	ylabel = "Â°C")
	hline!( [tempâ‚€,tempâ‚€], ls=:dash)
	annotate!( 80, tempâ‚€, 
		text("Preindustrial Temperature = $(tempâ‚€)Â°C",:bottom))
	title!("Earth's temperature without outgoing radiation")
```

### Earth with outgoing radiation 

Let's move on and consider the $ \text{\color{blue}{outgoing thermal radiation}} $, i.e. the [black-body radiation](https://en.wikipedia.org/wiki/Black-body_radiation) which allows Earth to dissipate some of the heat. It is a complicated phenomenon, which we simplify by linearizing it and assuming that, together with the incoming radiation, the overall contribution to $D(\text{temp}(t))$ is equal to $B(\text{tempâ‚€-temp(t)})$ for some $B$: 
```julia
@parameters B = 1.3 # "climate feedback parameter" in W/m^2/Â°C
@named sys_in_and_out = ODESystem([
		D(temp) ~ B*(tempâ‚€-temp)/C
	])
```

This time Earth can cool down. Let's solve the problem assuming that the initial temperature is higher, e.g. 20 Â°C, and plot the solution: 
```julia
init_condition = [temp => 20]
prob_in_and_out = ODEProblem(sys_in_and_out, init_condition, (0, 170))
sol_in_and_out = solve(prob_in_and_out)

plot(sol_in_and_out,
	legend = false, 
	xlabel = "Years after start",
	ylabel = "Â°C")
	hline!( [tempâ‚€,tempâ‚€], ls=:dash)
	annotate!( 80, tempâ‚€, 
		text("Initial temperature = $(tempâ‚€)Â°C",:bottom))
	title!("Earth's temperature with outgoing radiation")
```

ðŸ˜² Wow!
Unfortunately we are still ignoring one term of our initial equation...

## The infamous Greenhouse effect